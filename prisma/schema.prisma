generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  name   String   @unique
  phone  String
  gender Gender
  role   UserRole

  reviewerAssignments TestAssignment[] @relation("reviewer")
  revieweeAssignments TestAssignment[] @relation("reviewee")

  clubId Int?
  club   Club? @relation(fields: [clubId], references: [id], onDelete: SetNull)

  miniClubId Int?
  miniClub   MiniClub? @relation(fields: [miniClubId], references: [id], onDelete: SetNull)

  positionId Int?
  position   Position? @relation(fields: [positionId], references: [id], onDelete: SetNull)
}

model Club {
  id          Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  name String @unique

  user     User[]
  miniClub MiniClub[]
  position Position[]
}

model MiniClub {
  id          Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  name String @unique

  clubId Int
  club   Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  user User[]
}

model Position {
  id          Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  name String @unique

  club Club[]
  user User[]
}

model Question {
  id          Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  name    String @unique
  content String @unique

  miniTest   MiniTest[]
}

model MiniTest {
  id          Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  name        String @unique
  description String?
  proportion Float[]

  question   Question[]
  test       Test[]
}

model Test {
  id          Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  name        String @unique
  proportion  Float[]

  miniTest   MiniTest[]
  assignment TestAssignment[]
}

model TestAssignment {
  id          Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  reviewerId Int
  reviewer   User @relation("reviewer", fields: [reviewerId], references: [id])

  revieweeId Int
  reviewee   User @relation("reviewee", fields: [revieweeId], references: [id])

  testId    Int
  test      Test     @relation(fields: [testId], references: [id])
  
  status    TestStatus @default(PENDING) 
  scoreSet  Int[]
  score     Float?
}

enum TestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  ADMIN
  MANAGER
  LEADER
  WORKER
}
